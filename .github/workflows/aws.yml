name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  #preferred aws region
  AWS_REGION: ap-south-1
  #ECR repo name to push the built image
  ECR_REPOSITORY: docker-test
  #ECS cluster name
  ECS_CLUSTER: my-test-cluster
  # ECS service name created under cluster
  ECS_SERVICE: my-test-ecs-service
  # ECS task definition name
  ECS_TASK_DEFINITION_NAME: my-test-task-definition
  # after creating the task definition choose the JSON tab and copy
  # path to the task definition file
  ECS_TASK_DEFINITION_PATH: aws/task-def.json
  #container name specified when creating task definition
  CONTAINER_NAME: my-test-docker-image

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      #copy (checkout) the repo to gActions vm
      - name: Checkout
        uses: actions/checkout@v3

      #configure aws cli for next steps
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      #login to ECR and get the registry
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      #Build the docker container and push it to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # create a new task def revision file json with the new image
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_PATH }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # deploy the new task definition
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false

      # Stop the previous running tasks before deploying the new task definition
      - name: Stop the previous running task (prev commit)
        run: |
          aws ecs stop-task --cluster ${{env.ECS_CLUSTER}} \
                --task $(aws ecs list-tasks --cluster ${{env.ECS_CLUSTER}} --desired-status RUNNING --family ${{env.ECS_TASK_DEFINITION_NAME}} | egrep "task/" | sed -E "s/.*task\/(.*)\"/\1/")
        continue-on-error: true
